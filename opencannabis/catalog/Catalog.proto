
/**
 * Specifies structures that, together, form a compose "product catalog," which is distinguished from a "menu"
 * because it is meant for back-office use in a PIM context, rather than a display context. Catalogs include,
 * by default, all products for a given scope, whether or not they are ready to be published.
 */
syntax = "proto3";

package opencannabis.catalog;

option optimize_for = SPEED;
option objc_class_prefix = "OCS";
option java_package = "io.opencannabis.schema.catalog";
option java_multiple_files = false;
option java_outer_classname = "ProductCatalog";

import "core/Datamodel.proto";

import "base/ProductKey.proto";
import "media/MediaKey.proto";
import "partner/BrandKey.proto";
import "temporal/Instant.proto";
import "products/menu/Menu.proto";

import "creative/CreativeKey.proto";

import "products/SKU.proto";
import "products/Apothecary.proto";
import "products/Cartridge.proto";
import "products/Edible.proto";
import "products/Extract.proto";
import "products/Flower.proto";
import "products/Merchandise.proto";
import "products/Plant.proto";
import "products/Preroll.proto";

import "google/protobuf/field_mask.proto";


// Describes references made from catalog products to generic content asset records, which might specify copy-text or
// other associated creative media/data, which are associated with the linked product.
message CreativeReference {
  option (core.db) = {
    mode: COLLECTION
    path: "creative"
  };

  // Assigned ID for this creative reference.
  string id = 1 [(core.field).type = ID];

  // Specifies the creative asset key which is being referenced.
  bloombox.creative.CreativeKey creative = 2;

  // Specific content revision which is being referenced.
  string revision = 3;

  // Product which uses the referenced content.
  opencannabis.base.ProductKey product = 4;

  // Path to the place where this creative is used in the subject product.
  google.protobuf.FieldMask embed = 5;
}


// Key that uniquely describes a catalog product revision. Each time the substantive content of a catalog product is
// updated, a new revision is created, along with a new revision key.
message RevisionKey {
  // Unique ID for this catalog product revision.
  string uuid = 1 [(core.field).type = ID];

  // Product key that owns this revision record.
  opencannabis.base.ProductKey key = 2 [
    (core.field).type = PARENT
  ];
}


// Describes a revision for a product record, which represents an individual content state, that was or will be, at some
// point, the active or draft content for a catalog product.
message ProductRevision {
  option (core.db) = {
    mode: COLLECTION
    path: "revisions"
  };

  // Key that uniquely identifies this product data revision.
  RevisionKey key = 1 [(core.field).type = KEY];

  // Content and materials data for this menu product.
  oneof product {
    // Apothecary product.
    opencannabis.products.Apothecary apothecary = 10 [(core.opts).concrete = true];

    // Cartridge product.
    opencannabis.products.Cartridge cartridge = 11 [(core.opts).concrete = true];

    // Edible product.
    opencannabis.products.Edible edible = 12 [(core.opts).concrete = true];

    // Extract product.
    opencannabis.products.Extract extract = 13 [(core.opts).concrete = true];

    // Flower product.
    opencannabis.products.Flower flower = 14 [(core.opts).concrete = true];

    // Merchandise product.
    opencannabis.products.Merchandise merchandise = 15 [(core.opts).concrete = true];

    // Plant product.
    opencannabis.products.Plant plant = 16 [(core.opts).concrete = true];

    // Preroll product.
    opencannabis.products.Preroll preroll = 17 [(core.opts).concrete = true];
  }

  // When this record was last validated.
  opencannabis.temporal.Instant validated = 95 [
    (core.field).summary = "When this record was last validated."
  ];

  // When this record was published, if applicable.
  opencannabis.temporal.Instant published = 97 [
    (core.field).summary = "When this record was published, if applicable."
  ];

  // When this record was last updated, if applicable.
  opencannabis.temporal.Instant updated = 98 [
    (core.field).stamp_update = true,
    (core.field).summary = "When this record was last updated, if applicable."
  ];

  // When this record was originally created.
  opencannabis.temporal.Instant created = 99 [
    (core.field).stamp_create = true,
    (core.field).summary = "When this record was originally created."
  ];
}


// Specifies a back-office view of a product, with the associated metadata to help shuttle it from a point of being new
// and empty to full and compliant with all policies. The lifecycle of back-office products moves from DRAFT, to READY,
// and optionally to PUBLISHED, at which point it is made public to other organizations and data consumers.
message CatalogProduct {
  option (core.db) = {
    mode: GROUP
    path: "catalog"
  };

  // Enumerates statuses that a catalog product may take on.
  enum Status {
    // The product is a draft.
    DRAFT = 0;

    // The product is ready.
    READY = 1;

    // The product is published.
    PUBLISHED = 2;

    // The product has been archived.
    ARCHIVED = 3;
  }

  // Key record uniquely identifying this catalog product. Keys for saved items are lifted to this property from the
  // attached concrete record below.
  opencannabis.base.ProductKey key = 1 [
    (core.field).type = KEY
  ];

  // Product tags attached to this entry. Product tags are arbitrary phrases or strings that may be attached to product
  // records to help categorize them or facilitate their management. They are not generally end-user-visible.
  repeated opencannabis.products.menu.ProductTag tag = 2 [
    (core.field).visibility = OWNER,
    (core.collection) = {
      mode: GROUP
      concrete: "tags"
      path: "tags"
    }
  ];

  // Set of foreign references for this product, or, instances in which this product exists in an out-of-network system,
  // in a uniquely identifiable way.
  repeated opencannabis.products.menu.ForeignReference ref = 3 [
    (core.field).visibility = INTERNAL,
    (core.collection) = {
      mode: GROUP
      concrete: "references"
      path: "references"
    }
  ];

  // Specifies media references for this product. These are gathered from all applicable sub-objects, for instance,
  // product content media and laboratory test result attached media.
  repeated opencannabis.media.MediaReference media = 4 [
    (core.collection) = {
      mode: GROUP
      concrete: "media"
      path: "media"
      embed: true
    }
  ];

  // Specifies Stock-Keeping-Units (SKUs) mapped to this product in foreign systems. This is distinguished from foreign
  // references by the ability to address specific product variants over multiple opaque IDs.
  repeated opencannabis.products.sku.MappedSKU sku = 5 [
    (core.field).visibility = INTERNAL,
    (core.collection) = {
      mode: COLLECTION
      path: "sku"
      embed: true
    }
  ];

  // Symbolic sub-collection of data revisions owned by this product record. For each substantive change to a product
  // record, a new revision is created and made active when ready.
  repeated ProductRevision revision = 6 [
    (core.field).visibility = INTERNAL,
    (core.collection) = {
      mode: COLLECTION
      path: "revisions"
    }
  ];

  // Specifies references to creative asset content, which is used by/linked to this catalog product. Referenced content
  // might include copy-text, fonts, color swatches, etc.
  repeated CreativeReference creative = 7 [
    (core.collection) = {
      mode: COLLECTION
      path: "creative"
      embed: true
    }
  ];

  // Describes the brand scope that owns this product key, and the underlying data associated with it.
  bloombox.partner.BrandKey owner = 8 [
    (core.field) = {
      type: PARENT
      visibility: INTERNAL
      summary: "Describes the brand scope that owns this product key, and the data associated with it."
    }
  ];

  // Current status for this catalog product.
  Status status = 9 [(core.field).summary = "Current status for this catalog product."];

  // Active revision for this record. Embedded in the record itself to facilitate querying.
  ProductRevision active = 10 [
    (core.field).summary = "Active revision for this record. Embedded in the record itself to facilitate querying."
  ];

  // Draft revision for this record. Embedded in the record itself to facilitate querying.
  ProductRevision draft = 11 [
    (core.field).summary = "Draft revision for this record. Embedded in the record itself to facilitate querying."
  ];

  // When this record was last validated, if applicable.
  opencannabis.temporal.Instant validated = 95 [
    (core.field).summary = "When this record was published, if applicable."
  ];

  // When this record was published, if applicable.
  opencannabis.temporal.Instant published = 96 [
    (core.field).summary = "When this record was published, if applicable."
  ];

  // When this record was last revised, if applicable. Should equal the latest-revision's created timestamp.
  opencannabis.temporal.Instant revised = 97 [
    (core.field).summary = "When this record was last revised, if applicable."
  ];

  // When this record was last updated, if applicable.
  opencannabis.temporal.Instant updated = 98 [
    (core.field).stamp_update = true,
    (core.field).summary = "When this record was last updated, if applicable."
  ];

  // When this record was originally created.
  opencannabis.temporal.Instant created = 99 [
    (core.field).stamp_create = true,
    (core.field).summary = "When this record was originally created."
  ];
}
